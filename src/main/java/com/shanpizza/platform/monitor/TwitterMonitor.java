package com.shanpizza.platform.monitor;

import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.social.twitter.api.Tweet;
import org.springframework.social.twitter.api.TwitterProfile;
import org.springframework.social.twitter.api.impl.TwitterTemplate;
import org.springframework.stereotype.Component;

import com.shanpizza.platform.dao.CouponDAO;
import com.shanpizza.platform.dao.CustomerDAO;
import com.shanpizza.platform.model.Coupon;
import com.shanpizza.platform.model.Customer;

import utils.CouponGenerator;


/**
 * The Class TwitterMonitor.
 * 
 * This class is a Monitor to poll Twitter timeline feeds
 * It uses Twitter template to connect and retrieve data
 * 
 * This class uses timeline feed to check latest mentions and based upon that
 * it will send direct messages to customer with a Coupon code.  Coupon is generated
 * dynamically and persisted in database.
 */
@EnableScheduling
@Component
public class TwitterMonitor {

	/** The twitter. */
	@Autowired
	private TwitterTemplate twitter;

	/** The coupon repo. */
	@Autowired
	private CouponDAO couponRepo;
	
	/** The customer repo. */
	@Autowired
	private CustomerDAO customerRepo;
	
	/** The service twitter handle. */
	@Value("${twitter.screename}")
	private String serviceTwitterHandle;

	/** The max id. */
	private long maxId = -1;
	
	/** The min id. This id is a number generated by twitter and it increases over time */
	private long minId = -1;

	/** The Constant LOGGER. */
	private static final Logger LOGGER = LoggerFactory.getLogger(TwitterMonitor.class);

	/** The monitor. */
	private static boolean monitor = true ;

	/**
	 * Keep alive.
	 */
	@Scheduled(fixedRate = 60000)
	public void keepAlive() {

		if (monitor) {
			
			checkTwitterFeed();
		}
	}

	/**
	 * Check twitter feed.
	 */
	public void checkTwitterFeed() {

		try {

          // Get Mentions by other Twitter users
			List<Tweet> tweets = twitter.timelineOperations().getMentions(200, minId, maxId);
			
			// Get any retweets
			List<Tweet> reTweets = twitter.timelineOperations().getHomeTimeline(1, minId, maxId);
			tweets.addAll(reTweets);
			
			// Check tweets and set up minId (don't want to always start from beginning)

			if (tweets != null && !tweets.isEmpty()) {
				minId = tweets.stream().sorted((u1, u2) -> Long.compare(u2.getId(), u1.getId())).findFirst().get()
						.getId();

				// Transform tweets into User screen names stream
				List<String> users = tweets.stream()
						.map(Tweet::getFromUser)
						.distinct()
						.collect(Collectors.toList());
				
				// remove service screen name if made it to list
				users.remove(serviceTwitterHandle);
				
				// CHeck followers/subscriber.  Twitter doesn't allow direct messages to non subscribers
				List<String> followers = twitter.friendOperations().getFollowers().stream()
						.map(TwitterProfile::getScreenName).collect(Collectors.toList());

				for (String user : users) {

					twitter.friendOperations().follow(user);

					if (followers.contains(user)) {

						String message = "Thank you for supporting us, here is a Buy 1 get 1 free coupon just for you.  Code:";
						Customer customer = customerRepo.getCustomer(user);
						
						// check if customer doesn't exists in our system otherwise 
						// check if they already have a valid coupon
						// only sends a new coupon if one is already redeemed.
						if (customer == null)
						{
							customer = new Customer();
							customer.setName(user);
						}
						else if ( !customer.getCoupon().isRedeemed())
						{
							System.out.println("Customer: " +user+ " already has a valid coupon");
							break;
						}
						
						Coupon coupon = CouponGenerator.generate();
						couponRepo.save(coupon);

					    customer.setCoupon(coupon);
						customerRepo.save(customer);
                        
						message += coupon.getCode();
						System.out.println("user : " + user);
						twitter.directMessageOperations().sendDirectMessage(user, message);
					}
					
					

				}
			}

		//	System.out.println("I am up");

		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
}
